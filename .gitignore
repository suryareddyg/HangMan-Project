import json
import requests
import random
import string
import secrets
import time
import re
import collections
import string
from collections import Counter
from itertools import groupby

try:
    from urllib.parse import parse_qs, urlencode, urlparse
except ImportError:
    from urlparse import parse_qs, urlparse
    from urllib import urlencode
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

HANGMAN_URL = "https://sg.trexsim.com/trexsim/hangman"

class HangmanAPI(object):
    def __init__(self, access_token=None, session=None, timeout=None):
        self.access_token = access_token
        self.session = session or requests.Session()
        self.timeout = timeout
        self.guessed_letters = []
        
        full_dictionary_location = "words_250000_train.txt"
        self.full_dictionary = self.build_dictionary(full_dictionary_location)        
        self.full_dictionary_common_letter_sorted = collections.Counter("".join(self.full_dictionary)).most_common()      
        self.current_dictionary = []
    def guess(self, word):
        # Clean the word by removing spaces and replacing "_" with "."
        clean_word = word.replace(" ", "").replace("_", ".")

        # Create a regular expression pattern from the clean word
        pattern = re.compile(clean_word)

        # Filter the current dictionary to find words that match the pattern
        matching_words = [dict_word for dict_word in self.current_dictionary if pattern.match(dict_word)]

        # If there are matching words, update the current dictionary
        if matching_words:
            self.current_dictionary = matching_words

        # Count the occurrence of all characters in the matching words
        letter_counts = Counter("".join(matching_words))

        # Sort the letter counts in descending order
        sorted_letter_counts = letter_counts.most_common()

        # Get the set of already guessed letters
        guessed_letters_set = set(self.guessed_letters)

        # Generate a list of letters ordered by their likelihood based on various strategies
        ordered_letters = []

        # Strategy 1: Frequency-based Letter Guessing
        ordered_letters.extend([letter for letter, count in sorted_letter_counts if letter not in guessed_letters_set])

        # Strategy 2: Letter Position Analysis
        ordered_letters.extend([letter for letter in self.get_letters_by_position(matching_words) if letter not in guessed_letters_set])

        # Strategy 3: Pattern Matching with Contextual Information
        ordered_letters.extend([letter for letter in self.get_letters_by_pattern(matching_words, clean_word) if letter not in guessed_letters_set])

        # Strategy 4: English Letter Frequency
        ordered_letters.extend([letter for letter in self.get_letters_by_frequency() if letter not in guessed_letters_set])

        # Find the first letter from the ordered list that hasn't been guessed yet
        guess_letter = next((letter for letter in ordered_letters if letter not in guessed_letters_set), None)

        # If no letter is found, default back to the ordering of the full dictionary
        if not guess_letter:
            guess_letter = next((letter for letter, count in self.full_dictionary_common_letter_sorted if letter not in guessed_letters_set), None)

        # Add the guessed letter to the list of guessed letters
        if guess_letter:
            self.guessed_letters.append(guess_letter)

        return guess_letter

    def get_letters_by_position(self, words):
        letter_positions = Counter()

        # Count the positions of letters in the matching words
        for word in words:
            for index, letter in enumerate(word):
                if letter == "_":
                    letter_positions[(index, word)] += 1

        # Sort the letter positions by their occurrence
        sorted_letter_positions = letter_positions.most_common()

        # Extract the letters from the positions
        letters = [word[index] for (index, word), count in sorted_letter_positions]

        return letters

    def get_letters_by_pattern(self, words, pattern):
        letter_counts = Counter()

        # Iterate through the words and compare them with the pattern
        for word in words:
            for letter, p in zip(word, pattern):
                if letter == "_" and p != ".":
                    letter_counts[letter] += 1

        # Sort the letters by their occurrence
        sorted_letters = letter_counts.most_common()

        # Extract the letters
        letters = [letter for letter, count in sorted_letters]

        return letters

    def get_letters_by_frequency(self):
        # Get the English letter frequency
        english_letter_frequency = "etaoinshrdlcumwfgypbvkjxqz"

        # Filter out letters that have already been guessed
        letters = [letter for letter in english_letter_frequency if letter not in self.guessed_letters]

        return letters
    ##########################################################
    # You'll likely not need to modify any of the code below #
    ##########################################################
    
    def build_dictionary(self, dictionary_file_location):
        text_file = open(dictionary_file_location,"r")
        full_dictionary = text_file.read().splitlines()
        text_file.close()
        return full_dictionary
                
    def start_game(self, practice=True, verbose=True):
        # reset guessed letters to empty set and current plausible dictionary to the full dictionary
        self.guessed_letters = []
        self.current_dictionary = self.full_dictionary
                         
        response = self.request("/new_game", {"practice":practice})
        if response.get('status')=="approved":
            game_id = response.get('game_id')
            word = response.get('word')
            tries_remains = response.get('tries_remains')
            if verbose:
                print("Successfully start a new game! Game ID: {0}. # of tries remaining: {1}. Word: {2}.".format(game_id, tries_remains, word))
            while tries_remains>0:
                # get guessed letter from user code
                guess_letter = self.guess(word)
                    
                # append guessed letter to guessed letters field in hangman object
                self.guessed_letters.append(guess_letter)
                if verbose:
                    print("Guessing letter: {0}".format(guess_letter))
                    
                try:    
                    res = self.request("/guess_letter", {"request":"guess_letter", "game_id":game_id, "letter":guess_letter})
                except HangmanAPIError:
                    print('HangmanAPIError exception caught on request.')
                    continue
                except Exception as e:
                    print('Other exception caught on request.')
                    raise e
               
                if verbose:
                    print("Sever response: {0}".format(res))
                status = res.get('status')
                tries_remains = res.get('tries_remains')
                if status=="success":
                    if verbose:
                        print("Successfully finished game: {0}".format(game_id))
                    return True
                elif status=="failed":
                    reason = res.get('reason', '# of tries exceeded!')
                    if verbose:
                        print("Failed game: {0}. Because of: {1}".format(game_id, reason))
                    return False
                elif status=="ongoing":
                    word = res.get('word')
        else:
            if verbose:
                print("Failed to start a new game")
        return status=="success"
        
    def my_status(self):
        return self.request("/my_status", {})
    
    def request(
            self, path, args=None, post_args=None, method=None):
        if args is None:
            args = dict()
        if post_args is not None:
            method = "POST"

        # Add `access_token` to post_args or args if it has not already been
        # included.
        if self.access_token:
            # If post_args exists, we assume that args either does not exists
            # or it does not need `access_token`.
            if post_args and "access_token" not in post_args:
                post_args["access_token"] = self.access_token
            elif "access_token" not in args:
                args["access_token"] = self.access_token

        time.sleep(0.2)

        num_retry, time_sleep = 50, 2
        for it in range(num_retry):
            try:
                response = self.session.request(
                    method or "GET",
                    HANGMAN_URL + path,
                    timeout=self.timeout,
                    params=args,
                    data=post_args,
                    verify=False
                )
                break
            except requests.HTTPError as e:
                response = json.loads(e.read())
                raise HangmanAPIError(response)
            except requests.exceptions.SSLError as e:
                if it + 1 == num_retry:
                    raise
                time.sleep(time_sleep)

        headers = response.headers
        if 'json' in headers['content-type']:
            result = response.json()
        elif "access_token" in parse_qs(response.text):
            query_str = parse_qs(response.text)
            if "access_token" in query_str:
                result = {"access_token": query_str["access_token"][0]}
                if "expires" in query_str:
                    result["expires"] = query_str["expires"][0]
            else:
                raise HangmanAPIError(response.json())
        else:
            raise HangmanAPIError('Maintype was not text, or querystring')

        if result and isinstance(result, dict) and result.get("error"):
            raise HangmanAPIError(result)
        return result
    
class HangmanAPIError(Exception):
    def __init__(self, result):
        self.result = result
        self.code = None
        try:
            self.type = result["error_code"]
        except (KeyError, TypeError):
            self.type = ""

        try:
            self.message = result["error_description"]
        except (KeyError, TypeError):
            try:
                self.message = result["error"]["message"]
                self.code = result["error"].get("code")
                if not self.type:
                    self.type = result["error"].get("type", "")
            except (KeyError, TypeError):
                try:
                    self.message = result["error_msg"]
                except (KeyError, TypeError):
                    self.message = result

        Exception.__init__(self, self.message)

api = HangmanAPI(access_token="placeholder", timeout=2000)

for i in range(1000):
    print('Playing ', i, ' th game')
    # Uncomment the following line to execute your final runs. Do not do this until you are satisfied with your submission
    #api.start_game(practice=0,verbose=False)
    
    # DO NOT REMOVE as otherwise the server may lock you out for too high frequency of requests

[total_practice_runs,total_recorded_runs,total_recorded_successes,total_practice_successes] = api.my_status() # Get my game stats: (# of tries, # of wins)
print(total_recorded_runs)

[total_practice_runs,total_recorded_runs,total_recorded_successes,total_practice_successes] = api.my_status() # Get my game stats: (# of tries, # of wins)
success_rate = total_recorded_successes/total_recorded_runs
print('overall success rate = %.3f' % success_rate)
    time.sleep(0.5)
